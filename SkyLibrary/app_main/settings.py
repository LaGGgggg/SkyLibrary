"""
Django settings for SkyLibrary project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import sys
import dj_database_url
from pathlib import Path
from environ import Env

from .services import not_env_var_set_handler, LOGS_FILE_NAME

env = Env()
Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default=None)

if not SECRET_KEY:

    SECRET_KEY = os.urandom(32)

    not_env_var_set_handler('SECRET_KEY', context='used random', error_level='WARNING')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG', default=None)

if not DEBUG:

    DEBUG = False

    not_env_var_set_handler('DEBUG', context='used False', error_level='WARNING')

ALLOWED_HOSTS = []
INTERNAL_IPS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'debug_toolbar',
    'accounts_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

TEMPLATE_DIR = BASE_DIR.joinpath('templates')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

if env('GITHUB_OVERFLOW', default=False):
    # for GitHub actions autotests
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'postgres',
            'USER': 'postgres',
            'PASSWORD': 'postgres',
            'HOST': '127.0.0.1',
            'PORT': '5432',
        }
    }
else:

    DB_URL = env('DB_URL', default=None)

    DATABASES = {
        'default': dj_database_url.config(default=DB_URL)
    }

    if not DB_URL:
        not_env_var_set_handler('DB_URL', error_level='ERROR')


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

STATICFILES_DIRS = [
    BASE_DIR.joinpath('static'),
]


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            # Format such as: ""
            'format': '[{levelname}] [{asctime}] path - "{pathname}" function - "{funcName}" process - "{process:d}" '
                      'thread - "{thread:d}" message - "{message}"',
            'style': '{',
        },
        'simple': {
            'format': '[{levelname}] - "{message}"',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR.joinpath(LOGS_FILE_NAME),
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'file', 'mail_admins'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}


CACHE_LOCAL = env('CACHE_LOCAL', default='unset')

if CACHE_LOCAL == 'unset':
    """
    CACHE_LOCAL unset not critical for the project (because redis is used in production and False value in CACHE_LOCAL
    sets redis django backend, error in development (where file cache storage is used) is not critical) -->
    set default value (False)
    """
    not_env_var_set_handler('CACHE_LOCAL', context='used False', error_level='WARNING')

else:
    # needed because env() return string, any string (exclude empty) in bool is True
    CACHE_LOCAL = CACHE_LOCAL.lower() == 'true'

CACHE_LOCATIONS = env('CACHE_LOCATIONS', default='unset').split(', ')

if CACHE_LOCATIONS == ['unset']:
    """
    CACHE_LOCATIONS unset is critical for the project (because it causes an error when loading the template) -->
    we don't use cache otherwise other parts of the project don't work
    """
    not_env_var_set_handler('CACHE_LOCATIONS', context='not used', error_level='WARNING')

elif CACHE_LOCAL:
    # Local development cache case
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
            'LOCATION': CACHE_LOCATIONS[0],
        }
    }

else:
    # Production cache case
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': CACHE_LOCATIONS,
        }
    }


DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': 'app_main.services.show_debug_toolbar',
}


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


APPS_DIR = str(BASE_DIR.joinpath('apps'))
sys.path.insert(0, APPS_DIR)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR.joinpath('staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
WSGI_APPLICATION = 'app_main.wsgi.application'
ROOT_URLCONF = 'app_main.urls'
PROJECT_ROOT = BASE_DIR.joinpath('apps')
AUTH_USER_MODEL = 'accounts_app.User'
LOGOUT_REDIRECT_URL = '/accounts/logout_successful/'
